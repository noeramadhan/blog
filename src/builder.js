const fs = require('fs')
const path = require('path')

const showdown = require('showdown')
const mdConverter = new showdown.Converter({ metadata: true, ghCompatibleHeaderId: true, requireSpaceBeforeHeadingText: true, emoji: true })

const cherio = require('cheerio')
const minify = require('@node-minify/core')
const htmlMinifier = require('@node-minify/html-minifier')
const minifyOptions = {
    collapseBooleanAttributes: true,
    collapseInlineTagWhitespace: true,
    collapseWhitespace: true,
    conservativeCollapse: true,
    decodeEntities: true,
    includeAutoGeneratedTags: false,
    minifyCSS: true,
    minifyJS: true,
    minifyURLs: true,
    preventAttributesEscaping: true,
    processConditionalComments: true,
    removeAttributeQuotes: false,
    removeComments: true,
    removeEmptyAttributes: true,
    removeOptionalTags: false,
    removeRedundantAttributes: true,
    removeScriptTypeAttributes: true,
    removeStyleLinkTypeAttributes: true,
    sortAttributes: true,
    sortClassName: true,
    trimCustomFragments: true,
    useShortDoctype: true,
    keepClosingSlash: true
}

const minifier = (content, paths, title) => {
    minify({
        compressor: htmlMinifier,
        content: content,
        options: minifyOptions
    }).then(data => {
        fs.writeFile(paths, data, (err) => {
            if (err) return console.log(err)
            console.log(title ? title : 'Index', 'created at', paths)
        })
    })
}

const BUILD_DIR = ['..', 'build']
const POSTS_DIR = ['posts']
const THEME_DIR = ['template']

const getPath = (target) => path.join(__dirname, ...target)

const extFilter = (files) => files.filter(item => path.extname(item).toLowerCase() == '.md')

const fileReader = (filename) => fs.readFileSync(getPath([...filename]), 'utf8', (err, file) => file)

const readPosts = () => fs.readdirSync(getPath(POSTS_DIR), (err, files) => extFilter(files))

const cherioLoad = (filename) => cherio.load(fileReader([...filename]), { decodeEntities: false, xmlMode: true })

const getTheme = (file) => cherioLoad([...THEME_DIR, file + '.partial'])

const dateMaker = (date) => {
    let helper = date.split('/')
    let dateFormat = new Date(helper[2], helper[1] - 1, helper[0])
    let cur = dateFormat.getFullYear().toString().substring(2)
    cur += (dateFormat.getMonth() + 1).toString().padStart(2, '0')
    cur += dateFormat.getDate().toString().padStart(2, '0')
    return cur
}

const cleanBuildDir = () => {
    const buildPath = getPath([...BUILD_DIR])
    const postsPath = getPath([...BUILD_DIR, ...POSTS_DIR])

    if (!fs.existsSync(buildPath)) fs.mkdirSync(buildPath)
    fs.readdirSync(buildPath).forEach(f => fs.rmSync(`${buildPath}/${f}`, { recursive: true }))
    if (!fs.existsSync(postsPath)) fs.mkdirSync(postsPath)
}

const buildFile = (data, title, path) => {
    const $ = getTheme('main')
    // const footer = getTheme('footer')

    $('title').text((title ? title + ' | ' : '') + $('title').text())
    $('.app').html(data)
    // $('.app').append(footer.html())

    minifier($.html(), getPath([...BUILD_DIR, ...path]), title)
}

const buildSingle = (data) => {
    const $ = getTheme('single')

    $('.item__title').text(data.title)
    $('.item__date').text(data.date)
    $('.single__content').html(data.content)

    buildFile($.html(), data.title, [...POSTS_DIR, data.slug + '.html'])
}

const buildList = (data) => {
    const $ = getTheme('list')

    const listItem = $('.item__wrapper').parent().html()
    $('.item__wrapper').remove()

    data.slice()
        .filter(item => {
            let helper = item.dateTemp.split('/')
            item.dateTemp = new Date(helper[2], helper[1] - 1, helper[0])
            return item
        })
        .sort((a, b) => new Date(b.dateTemp) - new Date(a.dateTemp))
        .forEach(item => {
            let helper = cherio.load(listItem, { xmlMode: true })
            helper('.item__wrapper').attr('id', item.date)
            helper('.item__title').text(item.title)
            helper('.item__date').text(item.date)
            helper('.list__link').attr('href', '/' + POSTS_DIR.toString() + '/' + item.slug + '.html')
            $('.list').append(helper.html())
        })

    buildFile($.html(), '', ['index.html'])
}

const main = () => {
    cleanBuildDir()
    const postList = readPosts().map(file => {
        let html = mdConverter.makeHtml(fileReader([...POSTS_DIR, file]))
        const { title, date } = mdConverter.getMetadata()

        let meta = {
            title: title,
            date: dateMaker(date),
            dateTemp: date,
            slug: file.split('.')[0]
        }

        buildSingle({...meta, content: html})

        return meta
    })
    buildList(postList)
}

main()